From djsperka at ucdavis.edu  Tue Jan  3 03:07:22 2006
From: djsperka at ucdavis.edu (Daniel Sperka)
Date: Mon, 02 Jan 2006 18:07:22 -0800
Subject: [Osxptb-dev] Re: Eyelink Toolbox checked in
In-Reply-To: <764e38540512191109n1b28e968j2ff5ff18d6a20696@mail.gmail.com>
References: <764e38540512191109n1b28e968j2ff5ff18d6a20696@mail.gmail.com>
Message-ID: <43B9DC5A.302@ucdavis.edu>

Pardon the question - I'm fairly new to xcode. This old dog can learn 
new tricks, but sometimes I'm a little slow on the uptake.

I checked out the ptb source from berlios last week - Thanks, Chris.

I cannot seem to open the xcode project!?!

I'm assuming that the xcode proiject file is in 
PsychSourceGL/Projects/MacOSX/PsychToolbox/PsychToolbox.xcodeproj/project.pbxproj

If I double click on this file in Finder then XCode starts, but there is 
no evidence that I've opened the project. For example under the Project 
tab all options (including "Show Project") are gray. I've fumbled 
around, read docs, googled but all docs seem to assume that a developer 
will know how to open the project. Forgive me, I just don't know ......

Can anyone take a minute and set me straight?

Thanks,

Dan

Chris Burns wrote:

>Dan and Frans,
>
>I just checked in my source for the Eyelink Toolbox.  I did not have
>access to the experiment machine I orginally set this up on, so I had
>to start over from my backups on a new machine... unfortunately I ran
>into several problems with XCode.  The Eyelink Target, as checked in
>does not compile!  For whatever reason, XCode cannot find the Eyelink
>Header file, eyelink.h.  I've included the eyelink_core.framework, and
>I don't see any differences between the checked-in project and my
>original project.  I'm at a loss.  XCode is very different than VC++,
>and I'm still not up to speed on it's use of frameworks.
>
>Some Hacks I used:
>- Somewhere in the PsychToolbox.xcodeproj the Matlab directory is
>assigned, but I can't find where.  grepping the file it's set to
>MATLAB704.  I'm using vertion 7.1, so I created a symbolic link in
>Applications directory for 7.04 to point to 7.1
>
>- On my experiment machine, XCode couldn't find Frameworks outside of
>the System folder, so I copied
>/Library/Frameworks/eyelink_core.framework to
>/System/Library/Frameworks/eyelink_core.framework.
>
>Sorry, I hate checking in code that doesn't compile, but hopefully
>it's a simple fix that will be obvious to someone else.  And I ran out
>of time to work on this as I'm heading out of town for the week.  I'll
>be back next week and can help more with it then.
>
>Below is a copy of the email Frans sent me that includes the original
>OSX port of the Eyelink Toolbox.  Much of the source can probably be
>included in the project as is, but you'd want to give it a once-over.
>
>Good Luck!
>Chris
>
>
>-----------------------------------------------------------------
>Dear all,
>
>There seems to be a growing interest in getting an OSX version of the
>Eyelinktoolbox.
>
>Quite a while ago (2 years?) we (Enno Peters that is) started working
>on a version but were sort of stopped by the lack of a stable
>psychtoolbox. I call this our early alpha version. It actually worked
>to some extent. I haven't gotten back to it yet, due mainly to a lack
>of time (and Enno leaving for a proper job).
>
>Here's (a copy of) a message I wrote a while to another  wannabe
>Eyelink porter (Daniel Sperka):
>---------------------------------------------------------
>It would be timely if an OSX version of the Eyelink TB would come out
>now. In my view the PTB is becoming really useful now, especially after
>the improvements Mario Kleiner has been making.
>
>I believe a few months would be quite sufficient to get a working
>version (like I mentioned, there is an early version that has some
>functions working).
>
>There's a couple of things that I think need to be changed/improved:
>
>1. Update to newest XCode/Matlab/PTB source code. Shouldn't be much of
>an issue, but still.
>2. Check for updates in code with SR Research.
>3. Make sure we do not use any graphics other than via PTB (there is a
>problem with the 'eye' graphic during calibration).
>4. Seperate out functions from 'shell' very much like current PTB does.
>This is not an absolute necessity, but using the same methods as the
>current PTB presumably would make things easier to maintain in the long
>run.
>
>5. Update many of the .m files to use e.g. new graphics calls of PTB.
>
>6. Test everything for speed, delays, etc.
>
>7. provide some support/updates.
>
>The OS9 code can be downloaded from
>http://www.psychtoolbox.org/eyelinktoolbox/downloads/
>EyelinkToolbox_C_code_1.4.sit
> I believe this is the most recent OS9 code.
>
>I've traced some OSX code for you.  I am not entirely sure if it is
>complete. Enno Peters wasn't a superbly organised programmer, and I
>haven't looked at this project for quite a while.
>
>Download from
>http://cornelis.med.rug.nl/pub/eyelinktoolbox/code/EyelinkOSXCode19-10
>-05.zip
>
>In principle I am very much open to a collaboration.
>
>--------------------
>
>
>Here's a plan:
>I am offering our code as a starter. If someone with a little time on
>their hands (Chris?) would check the OSX source code into the/some CVS
>server and do #1 on the list, that would be a step forward. (Then
>please tell all other interested in development how to get to it.)
>PTB in my view is about collaboration, rather than people reinventing
>wheels (or even 30% of them). So, be fair and please use the head start
>and collaborative opportunities available to create a full working
>version of the ETB.
>Also, it be nice if a reasonable degree of backward compatibility with
>the OS9 version is maintained.
>
>My proposal is that those interested in Eyelink TB programming reply to
>me, so that we continue the discussion in that group (and decide where
>to do this). I can tell a bit more also about our ideas back then about
>what ETB should be doing (and what not).
>
>Gr.
>Frans
>
>
>
>On 12/14/05, Daniel Sperka <djsperka at ucdavis.edu> wrote:
>  
>
>>Any chance yet to check in the code? I don't want to be a pest, so
>>please understand. We're just eager. Thanks in advance.
>>
>>Dan
>>
>>    
>>
>
>  
>

-- 
=======================================================================

Daniel J. Sperka, Ph. D.
Software Developer/Analyst
Center for Neuroscience
University of California, Davis

=======================================================================




From mario.kleiner at tuebingen.mpg.de  Tue Jan  3 04:25:30 2006
From: mario.kleiner at tuebingen.mpg.de (Mario Kleiner)
Date: Tue, 03 Jan 2006 04:25:30 +0100
Subject: [Osxptb-dev] Initial port of OS-X Psychtoolbox to M$ Windows (nearly)
 ready...
Message-ID: <web-16639343@tuebingen.mpg.de>

Hi everybody and happy new year!

I spent some time porting OS-X PTB to Windows. It's not
polished yet and has some limitation wrt. OS-X version
(e.g, lack for multi-display support as i don't know how to
enumerate displays on Windows, lack of Quicktime support, a
few secondary commands don't work...), but it works already
fairly well - i would say after fixing a few small glitches
we could release it to users for cautious use. All
PsychDemos work already...

The current version is a hybrid of the OS-X toolbox and the
old Windows PTB:

* All M-Files identical to OS-X PTB, with some small
modifications to KbName and AssertOpenGL and MaxPriority.

* Screen.dll file is a ported version of OS-X OpenGL Screen

* All other Mex DLL's stolen from old Windows PTB...

I'll post you when it is ready for a first tryout, the
latest build for Windows has some problem i'll need to
resolve first, probably later this week. For now the code
has been added to the trunk.

Porting involved a some changes to the OSX parts of
PsychSourceGL . I've verified that this didn't break
anything in the OS-X branch. Read the Subversion log files
for detailed explanation of the changes.

The important thing: Update your working copies via the
"svn update" command to the latest revision before
continuing work!!! 

I'll go home now, tired...

ciao,
-mario


From chris.d.burns at gmail.com  Tue Jan  3 05:09:33 2006
From: chris.d.burns at gmail.com (Chris Burns)
Date: Mon, 2 Jan 2006 20:09:33 -0800
Subject: [Osxptb-dev] Re: Eyelink Toolbox checked in
In-Reply-To: <43B9DC5A.302@ucdavis.edu>
References: <764e38540512191109n1b28e968j2ff5ff18d6a20696@mail.gmail.com>
	 <43B9DC5A.302@ucdavis.edu>
Message-ID: <764e38540601022009mc28e6cfkcd1eff25ef669f1@mail.gmail.com>

Dan,

You want to double-click on the PsychToolbox.xcodeproj file itself,
don't traverse into that directory, those files are handled by XCode. 
In the Finder window, (or Open Dialog) the *.xcodeproj files should
have the XCode icon, blue-sheet with the pencil and ruler.

Chris

On 1/2/06, Daniel Sperka <djsperka at ucdavis.edu> wrote:
> Pardon the question - I'm fairly new to xcode. This old dog can learn
> new tricks, but sometimes I'm a little slow on the uptake.
>
> I checked out the ptb source from berlios last week - Thanks, Chris.
>
> I cannot seem to open the xcode project!?!
>
> I'm assuming that the xcode proiject file is in
> PsychSourceGL/Projects/MacOSX/PsychToolbox/PsychToolbox.xcodeproj/project.pbxproj
>
> If I double click on this file in Finder then XCode starts, but there is
> no evidence that I've opened the project. For example under the Project
> tab all options (including "Show Project") are gray. I've fumbled
> around, read docs, googled but all docs seem to assume that a developer
> will know how to open the project. Forgive me, I just don't know ......
>
> Can anyone take a minute and set me straight?
>
> Thanks,
>
> Dan
>
> Chris Burns wrote:
>
> >Dan and Frans,
> >
> >I just checked in my source for the Eyelink Toolbox.  I did not have
> >access to the experiment machine I orginally set this up on, so I had
> >to start over from my backups on a new machine... unfortunately I ran
> >into several problems with XCode.  The Eyelink Target, as checked in
> >does not compile!  For whatever reason, XCode cannot find the Eyelink
> >Header file, eyelink.h.  I've included the eyelink_core.framework, and
> >I don't see any differences between the checked-in project and my
> >original project.  I'm at a loss.  XCode is very different than VC++,
> >and I'm still not up to speed on it's use of frameworks.
> >
> >Some Hacks I used:
> >- Somewhere in the PsychToolbox.xcodeproj the Matlab directory is
> >assigned, but I can't find where.  grepping the file it's set to
> >MATLAB704.  I'm using vertion 7.1, so I created a symbolic link in
> >Applications directory for 7.04 to point to 7.1
> >
> >- On my experiment machine, XCode couldn't find Frameworks outside of
> >the System folder, so I copied
> >/Library/Frameworks/eyelink_core.framework to
> >/System/Library/Frameworks/eyelink_core.framework.
> >
> >Sorry, I hate checking in code that doesn't compile, but hopefully
> >it's a simple fix that will be obvious to someone else.  And I ran out
> >of time to work on this as I'm heading out of town for the week.  I'll
> >be back next week and can help more with it then.
> >
> >Below is a copy of the email Frans sent me that includes the original
> >OSX port of the Eyelink Toolbox.  Much of the source can probably be
> >included in the project as is, but you'd want to give it a once-over.
> >
> >Good Luck!
> >Chris
> >
> >
> >-----------------------------------------------------------------
> >Dear all,
> >
> >There seems to be a growing interest in getting an OSX version of the
> >Eyelinktoolbox.
> >
> >Quite a while ago (2 years?) we (Enno Peters that is) started working
> >on a version but were sort of stopped by the lack of a stable
> >psychtoolbox. I call this our early alpha version. It actually worked
> >to some extent. I haven't gotten back to it yet, due mainly to a lack
> >of time (and Enno leaving for a proper job).
> >
> >Here's (a copy of) a message I wrote a while to another  wannabe
> >Eyelink porter (Daniel Sperka):
> >---------------------------------------------------------
> >It would be timely if an OSX version of the Eyelink TB would come out
> >now. In my view the PTB is becoming really useful now, especially after
> >the improvements Mario Kleiner has been making.
> >
> >I believe a few months would be quite sufficient to get a working
> >version (like I mentioned, there is an early version that has some
> >functions working).
> >
> >There's a couple of things that I think need to be changed/improved:
> >
> >1. Update to newest XCode/Matlab/PTB source code. Shouldn't be much of
> >an issue, but still.
> >2. Check for updates in code with SR Research.
> >3. Make sure we do not use any graphics other than via PTB (there is a
> >problem with the 'eye' graphic during calibration).
> >4. Seperate out functions from 'shell' very much like current PTB does.
> >This is not an absolute necessity, but using the same methods as the
> >current PTB presumably would make things easier to maintain in the long
> >run.
> >
> >5. Update many of the .m files to use e.g. new graphics calls of PTB.
> >
> >6. Test everything for speed, delays, etc.
> >
> >7. provide some support/updates.
> >
> >The OS9 code can be downloaded from
> >http://www.psychtoolbox.org/eyelinktoolbox/downloads/
> >EyelinkToolbox_C_code_1.4.sit
> > I believe this is the most recent OS9 code.
> >
> >I've traced some OSX code for you.  I am not entirely sure if it is
> >complete. Enno Peters wasn't a superbly organised programmer, and I
> >haven't looked at this project for quite a while.
> >
> >Download from
> >http://cornelis.med.rug.nl/pub/eyelinktoolbox/code/EyelinkOSXCode19-10
> >-05.zip
> >
> >In principle I am very much open to a collaboration.
> >
> >--------------------
> >
> >
> >Here's a plan:
> >I am offering our code as a starter. If someone with a little time on
> >their hands (Chris?) would check the OSX source code into the/some CVS
> >server and do #1 on the list, that would be a step forward. (Then
> >please tell all other interested in development how to get to it.)
> >PTB in my view is about collaboration, rather than people reinventing
> >wheels (or even 30% of them). So, be fair and please use the head start
> >and collaborative opportunities available to create a full working
> >version of the ETB.
> >Also, it be nice if a reasonable degree of backward compatibility with
> >the OS9 version is maintained.
> >
> >My proposal is that those interested in Eyelink TB programming reply to
> >me, so that we continue the discussion in that group (and decide where
> >to do this). I can tell a bit more also about our ideas back then about
> >what ETB should be doing (and what not).
> >
> >Gr.
> >Frans
> >
> >
> >
> >On 12/14/05, Daniel Sperka <djsperka at ucdavis.edu> wrote:
> >
> >
> >>Any chance yet to check in the code? I don't want to be a pest, so
> >>please understand. We're just eager. Thanks in advance.
> >>
> >>Dan
> >>
> >>
> >>
> >
> >
> >
>
> --
> =======================================================================
>
> Daniel J. Sperka, Ph. D.
> Software Developer/Analyst
> Center for Neuroscience
> University of California, Davis
>
> =======================================================================
>
>
>


From chris.d.burns at gmail.com  Tue Jan  3 05:27:13 2006
From: chris.d.burns at gmail.com (Chris Burns)
Date: Mon, 2 Jan 2006 20:27:13 -0800
Subject: [Osxptb-dev] Initial port of OS-X Psychtoolbox to M$ Windows (nearly) ready...
In-Reply-To: <web-16639343@tuebingen.mpg.de>
References: <web-16639343@tuebingen.mpg.de>
Message-ID: <764e38540601022027l394ed142gd731b4674e49443f@mail.gmail.com>

Mario,

I noticed the files on my update, impressive!  One question, you
created a Screen project, why not a PsychToolbox project with
individual targets, mirroring what exists in the OSX version?

Chris


On 1/2/06, Mario Kleiner <mario.kleiner at tuebingen.mpg.de> wrote:
> Hi everybody and happy new year!
>
> I spent some time porting OS-X PTB to Windows. It's not
> polished yet and has some limitation wrt. OS-X version
> (e.g, lack for multi-display support as i don't know how to
> enumerate displays on Windows, lack of Quicktime support, a
> few secondary commands don't work...), but it works already
> fairly well - i would say after fixing a few small glitches
> we could release it to users for cautious use. All
> PsychDemos work already...
>
> The current version is a hybrid of the OS-X toolbox and the
> old Windows PTB:
>
> * All M-Files identical to OS-X PTB, with some small
> modifications to KbName and AssertOpenGL and MaxPriority.
>
> * Screen.dll file is a ported version of OS-X OpenGL Screen
>
> * All other Mex DLL's stolen from old Windows PTB...
>
> I'll post you when it is ready for a first tryout, the
> latest build for Windows has some problem i'll need to
> resolve first, probably later this week. For now the code
> has been added to the trunk.
>
> Porting involved a some changes to the OSX parts of
> PsychSourceGL . I've verified that this didn't break
> anything in the OS-X branch. Read the Subversion log files
> for detailed explanation of the changes.
>
> The important thing: Update your working copies via the
> "svn update" command to the latest revision before
> continuing work!!!
>
> I'll go home now, tired...
>
> ciao,
> -mario
> _______________________________________________
> Osxptb-dev mailing list
> Osxptb-dev at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/osxptb-dev
>


From denis.pelli at nyu.edu  Tue Jan  3 08:53:40 2006
From: denis.pelli at nyu.edu (Denis Pelli)
Date: Tue, 03 Jan 2006 02:53:40 -0500
Subject: [Osxptb-dev] smart crash reports?
Message-ID: <09F193AA-ECDE-4577-9978-049242E484FC@nyu.edu>

dear mario et al.

this free crash-report sender sounds helpful. should we build it into  
Screen.mexmac?

http://www.unsanity.com/smartcrashreports/

best

denis

Denis Pelli
Professor of Psychology and Neural Science
http://psych.nyu.edu/pelli/

p.s.
can you add me to the osxptb-dev list?



From djsperka at ucdavis.edu  Tue Jan  3 18:29:11 2006
From: djsperka at ucdavis.edu (Daniel Sperka)
Date: Tue, 03 Jan 2006 09:29:11 -0800
Subject: [Osxptb-dev] Re: Eyelink Toolbox checked in
In-Reply-To: <764e38540601022009mc28e6cfkcd1eff25ef669f1@mail.gmail.com>
References: <764e38540512191109n1b28e968j2ff5ff18d6a20696@mail.gmail.com>	 <43B9DC5A.302@ucdavis.edu> <764e38540601022009mc28e6cfkcd1eff25ef669f1@mail.gmail.com>
Message-ID: <43BAB467.60006@ucdavis.edu>

Oops! Thanks for your help (Mario, too). It appears I must upgrade xcode 
to >= 2.1; versions prior to that did not use *.xcodeproj bundles.

Dan

Chris Burns wrote:

>Dan,
>
>You want to double-click on the PsychToolbox.xcodeproj file itself,
>don't traverse into that directory, those files are handled by XCode. 
>In the Finder window, (or Open Dialog) the *.xcodeproj files should
>have the XCode icon, blue-sheet with the pencil and ruler.
>
>Chris
>
>On 1/2/06, Daniel Sperka <djsperka at ucdavis.edu> wrote:
>  
>
>>Pardon the question - I'm fairly new to xcode. This old dog can learn
>>new tricks, but sometimes I'm a little slow on the uptake.
>>
>>I checked out the ptb source from berlios last week - Thanks, Chris.
>>
>>I cannot seem to open the xcode project!?!
>>
>>I'm assuming that the xcode proiject file is in
>>PsychSourceGL/Projects/MacOSX/PsychToolbox/PsychToolbox.xcodeproj/project.pbxproj
>>
>>If I double click on this file in Finder then XCode starts, but there is
>>no evidence that I've opened the project. For example under the Project
>>tab all options (including "Show Project") are gray. I've fumbled
>>around, read docs, googled but all docs seem to assume that a developer
>>will know how to open the project. Forgive me, I just don't know ......
>>
>>Can anyone take a minute and set me straight?
>>
>>Thanks,
>>
>>Dan
>>
>>Chris Burns wrote:
>>
>>    
>>
>>>Dan and Frans,
>>>
>>>I just checked in my source for the Eyelink Toolbox.  I did not have
>>>access to the experiment machine I orginally set this up on, so I had
>>>to start over from my backups on a new machine... unfortunately I ran
>>>into several problems with XCode.  The Eyelink Target, as checked in
>>>does not compile!  For whatever reason, XCode cannot find the Eyelink
>>>Header file, eyelink.h.  I've included the eyelink_core.framework, and
>>>I don't see any differences between the checked-in project and my
>>>original project.  I'm at a loss.  XCode is very different than VC++,
>>>and I'm still not up to speed on it's use of frameworks.
>>>
>>>Some Hacks I used:
>>>- Somewhere in the PsychToolbox.xcodeproj the Matlab directory is
>>>assigned, but I can't find where.  grepping the file it's set to
>>>MATLAB704.  I'm using vertion 7.1, so I created a symbolic link in
>>>Applications directory for 7.04 to point to 7.1
>>>
>>>- On my experiment machine, XCode couldn't find Frameworks outside of
>>>the System folder, so I copied
>>>/Library/Frameworks/eyelink_core.framework to
>>>/System/Library/Frameworks/eyelink_core.framework.
>>>
>>>Sorry, I hate checking in code that doesn't compile, but hopefully
>>>it's a simple fix that will be obvious to someone else.  And I ran out
>>>of time to work on this as I'm heading out of town for the week.  I'll
>>>be back next week and can help more with it then.
>>>
>>>Below is a copy of the email Frans sent me that includes the original
>>>OSX port of the Eyelink Toolbox.  Much of the source can probably be
>>>included in the project as is, but you'd want to give it a once-over.
>>>
>>>Good Luck!
>>>Chris
>>>
>>>
>>>-----------------------------------------------------------------
>>>Dear all,
>>>
>>>There seems to be a growing interest in getting an OSX version of the
>>>Eyelinktoolbox.
>>>
>>>Quite a while ago (2 years?) we (Enno Peters that is) started working
>>>on a version but were sort of stopped by the lack of a stable
>>>psychtoolbox. I call this our early alpha version. It actually worked
>>>to some extent. I haven't gotten back to it yet, due mainly to a lack
>>>of time (and Enno leaving for a proper job).
>>>
>>>Here's (a copy of) a message I wrote a while to another  wannabe
>>>Eyelink porter (Daniel Sperka):
>>>---------------------------------------------------------
>>>It would be timely if an OSX version of the Eyelink TB would come out
>>>now. In my view the PTB is becoming really useful now, especially after
>>>the improvements Mario Kleiner has been making.
>>>
>>>I believe a few months would be quite sufficient to get a working
>>>version (like I mentioned, there is an early version that has some
>>>functions working).
>>>
>>>There's a couple of things that I think need to be changed/improved:
>>>
>>>1. Update to newest XCode/Matlab/PTB source code. Shouldn't be much of
>>>an issue, but still.
>>>2. Check for updates in code with SR Research.
>>>3. Make sure we do not use any graphics other than via PTB (there is a
>>>problem with the 'eye' graphic during calibration).
>>>4. Seperate out functions from 'shell' very much like current PTB does.
>>>This is not an absolute necessity, but using the same methods as the
>>>current PTB presumably would make things easier to maintain in the long
>>>run.
>>>
>>>5. Update many of the .m files to use e.g. new graphics calls of PTB.
>>>
>>>6. Test everything for speed, delays, etc.
>>>
>>>7. provide some support/updates.
>>>
>>>The OS9 code can be downloaded from
>>>http://www.psychtoolbox.org/eyelinktoolbox/downloads/
>>>EyelinkToolbox_C_code_1.4.sit
>>>I believe this is the most recent OS9 code.
>>>
>>>I've traced some OSX code for you.  I am not entirely sure if it is
>>>complete. Enno Peters wasn't a superbly organised programmer, and I
>>>haven't looked at this project for quite a while.
>>>
>>>Download from
>>>http://cornelis.med.rug.nl/pub/eyelinktoolbox/code/EyelinkOSXCode19-10
>>>-05.zip
>>>
>>>In principle I am very much open to a collaboration.
>>>
>>>--------------------
>>>
>>>
>>>Here's a plan:
>>>I am offering our code as a starter. If someone with a little time on
>>>their hands (Chris?) would check the OSX source code into the/some CVS
>>>server and do #1 on the list, that would be a step forward. (Then
>>>please tell all other interested in development how to get to it.)
>>>PTB in my view is about collaboration, rather than people reinventing
>>>wheels (or even 30% of them). So, be fair and please use the head start
>>>and collaborative opportunities available to create a full working
>>>version of the ETB.
>>>Also, it be nice if a reasonable degree of backward compatibility with
>>>the OS9 version is maintained.
>>>
>>>My proposal is that those interested in Eyelink TB programming reply to
>>>me, so that we continue the discussion in that group (and decide where
>>>to do this). I can tell a bit more also about our ideas back then about
>>>what ETB should be doing (and what not).
>>>
>>>Gr.
>>>Frans
>>>
>>>
>>>
>>>On 12/14/05, Daniel Sperka <djsperka at ucdavis.edu> wrote:
>>>
>>>
>>>      
>>>
>>>>Any chance yet to check in the code? I don't want to be a pest, so
>>>>please understand. We're just eager. Thanks in advance.
>>>>
>>>>Dan
>>>>
>>>>
>>>>
>>>>        
>>>>
>>>
>>>      
>>>
>>--
>>=======================================================================
>>
>>Daniel J. Sperka, Ph. D.
>>Software Developer/Analyst
>>Center for Neuroscience
>>University of California, Davis
>>
>>=======================================================================
>>
>>
>>
>>    
>>
>
>  
>

-- 
=======================================================================

Daniel J. Sperka, Ph. D.
Software Developer/Analyst
Center for Neuroscience
University of California, Davis

=======================================================================




From djsperka at ucdavis.edu  Wed Jan  4 20:49:44 2006
From: djsperka at ucdavis.edu (Daniel Sperka)
Date: Wed, 04 Jan 2006 11:49:44 -0800
Subject: [Osxptb-dev] Re: Eyelink Toolbox checked in
In-Reply-To: <764e38540601022009mc28e6cfkcd1eff25ef669f1@mail.gmail.com>
References: <764e38540512191109n1b28e968j2ff5ff18d6a20696@mail.gmail.com>	 <43B9DC5A.302@ucdavis.edu> <764e38540601022009mc28e6cfkcd1eff25ef669f1@mail.gmail.com>
Message-ID: <43BC26D8.1050300@ucdavis.edu>

Thanks again for the newbie help!

I've managed to get the project to build for the most part. Below are 
some notes on the experience.


System:
    The XCode project now requires XCode>=2.1, which is where the 
"xcodeproj" folder scheme was introduced. This in turn requires Tiger 
(OSX 10.4).

Project:
    MATLAB_DIR_NAME was "MATLAB704" in proj file. I had to change this 
to "MATLAB71"
    "mex.h", "matrix.h" and "mexversion.c" all have absolute paths. The 
path spec dialog doesn't seem to allow for any variables, hence I had to 
change them all to reflect my matlab path.
    The install stage of the builds assumes that 
/Applications/Psychtoolbox/Psych* folders all exist (will not create them?).

After addressing these three things all the targets (with three 
exceptions) build.
1. PsychHID - "libHIDUtilities.a" is out of date. I have no idea what 
this means, haven't looked into it yet
2. PsychSound - target has path references to a developer machine 
(Mario, I think). Again, haven't looked into it.
3. Eyelink. Had to address the following:
    eyelink_core framework had a path diff't than that used on my 
machine. Simple fix.
    plist file had incorrect path
    "PsychEyelink.h" referred to "eyelink.h", which could not be found. 
Chris referred to this in his email. The framework was correct, but the 
file was not found. After googling some I found that the include 
directive needed to be thus
#include <eyelink_core/eyelink.h>, with brackets and the framework name 
as the folder.

    After addressing these items, the toolbox built. Haven't tested it 
yet, and I can't until SR research releases a new API as the current one 
has no dual-CPU support and I have a dual CPU G5. They say it'll be 
within 2 weeks.



Dan

Chris Burns wrote:

>Dan,
>
>You want to double-click on the PsychToolbox.xcodeproj file itself,
>don't traverse into that directory, those files are handled by XCode. 
>In the Finder window, (or Open Dialog) the *.xcodeproj files should
>have the XCode icon, blue-sheet with the pencil and ruler.
>
>Chris
>
>On 1/2/06, Daniel Sperka <djsperka at ucdavis.edu> wrote:
>  
>
>>Pardon the question - I'm fairly new to xcode. This old dog can learn
>>new tricks, but sometimes I'm a little slow on the uptake.
>>
>>I checked out the ptb source from berlios last week - Thanks, Chris.
>>
>>I cannot seem to open the xcode project!?!
>>
>>I'm assuming that the xcode proiject file is in
>>PsychSourceGL/Projects/MacOSX/PsychToolbox/PsychToolbox.xcodeproj/project.pbxproj
>>
>>If I double click on this file in Finder then XCode starts, but there is
>>no evidence that I've opened the project. For example under the Project
>>tab all options (including "Show Project") are gray. I've fumbled
>>around, read docs, googled but all docs seem to assume that a developer
>>will know how to open the project. Forgive me, I just don't know ......
>>
>>Can anyone take a minute and set me straight?
>>
>>Thanks,
>>
>>Dan
>>
>>Chris Burns wrote:
>>
>>    
>>
>>>Dan and Frans,
>>>
>>>I just checked in my source for the Eyelink Toolbox.  I did not have
>>>access to the experiment machine I orginally set this up on, so I had
>>>to start over from my backups on a new machine... unfortunately I ran
>>>into several problems with XCode.  The Eyelink Target, as checked in
>>>does not compile!  For whatever reason, XCode cannot find the Eyelink
>>>Header file, eyelink.h.  I've included the eyelink_core.framework, and
>>>I don't see any differences between the checked-in project and my
>>>original project.  I'm at a loss.  XCode is very different than VC++,
>>>and I'm still not up to speed on it's use of frameworks.
>>>
>>>Some Hacks I used:
>>>- Somewhere in the PsychToolbox.xcodeproj the Matlab directory is
>>>assigned, but I can't find where.  grepping the file it's set to
>>>MATLAB704.  I'm using vertion 7.1, so I created a symbolic link in
>>>Applications directory for 7.04 to point to 7.1
>>>
>>>- On my experiment machine, XCode couldn't find Frameworks outside of
>>>the System folder, so I copied
>>>/Library/Frameworks/eyelink_core.framework to
>>>/System/Library/Frameworks/eyelink_core.framework.
>>>
>>>Sorry, I hate checking in code that doesn't compile, but hopefully
>>>it's a simple fix that will be obvious to someone else.  And I ran out
>>>of time to work on this as I'm heading out of town for the week.  I'll
>>>be back next week and can help more with it then.
>>>
>>>Below is a copy of the email Frans sent me that includes the original
>>>OSX port of the Eyelink Toolbox.  Much of the source can probably be
>>>included in the project as is, but you'd want to give it a once-over.
>>>
>>>Good Luck!
>>>Chris
>>>
>>>
>>>-----------------------------------------------------------------
>>>Dear all,
>>>
>>>There seems to be a growing interest in getting an OSX version of the
>>>Eyelinktoolbox.
>>>
>>>Quite a while ago (2 years?) we (Enno Peters that is) started working
>>>on a version but were sort of stopped by the lack of a stable
>>>psychtoolbox. I call this our early alpha version. It actually worked
>>>to some extent. I haven't gotten back to it yet, due mainly to a lack
>>>of time (and Enno leaving for a proper job).
>>>
>>>Here's (a copy of) a message I wrote a while to another  wannabe
>>>Eyelink porter (Daniel Sperka):
>>>---------------------------------------------------------
>>>It would be timely if an OSX version of the Eyelink TB would come out
>>>now. In my view the PTB is becoming really useful now, especially after
>>>the improvements Mario Kleiner has been making.
>>>
>>>I believe a few months would be quite sufficient to get a working
>>>version (like I mentioned, there is an early version that has some
>>>functions working).
>>>
>>>There's a couple of things that I think need to be changed/improved:
>>>
>>>1. Update to newest XCode/Matlab/PTB source code. Shouldn't be much of
>>>an issue, but still.
>>>2. Check for updates in code with SR Research.
>>>3. Make sure we do not use any graphics other than via PTB (there is a
>>>problem with the 'eye' graphic during calibration).
>>>4. Seperate out functions from 'shell' very much like current PTB does.
>>>This is not an absolute necessity, but using the same methods as the
>>>current PTB presumably would make things easier to maintain in the long
>>>run.
>>>
>>>5. Update many of the .m files to use e.g. new graphics calls of PTB.
>>>
>>>6. Test everything for speed, delays, etc.
>>>
>>>7. provide some support/updates.
>>>
>>>The OS9 code can be downloaded from
>>>http://www.psychtoolbox.org/eyelinktoolbox/downloads/
>>>EyelinkToolbox_C_code_1.4.sit
>>>I believe this is the most recent OS9 code.
>>>
>>>I've traced some OSX code for you.  I am not entirely sure if it is
>>>complete. Enno Peters wasn't a superbly organised programmer, and I
>>>haven't looked at this project for quite a while.
>>>
>>>Download from
>>>http://cornelis.med.rug.nl/pub/eyelinktoolbox/code/EyelinkOSXCode19-10
>>>-05.zip
>>>
>>>In principle I am very much open to a collaboration.
>>>
>>>--------------------
>>>
>>>
>>>Here's a plan:
>>>I am offering our code as a starter. If someone with a little time on
>>>their hands (Chris?) would check the OSX source code into the/some CVS
>>>server and do #1 on the list, that would be a step forward. (Then
>>>please tell all other interested in development how to get to it.)
>>>PTB in my view is about collaboration, rather than people reinventing
>>>wheels (or even 30% of them). So, be fair and please use the head start
>>>and collaborative opportunities available to create a full working
>>>version of the ETB.
>>>Also, it be nice if a reasonable degree of backward compatibility with
>>>the OS9 version is maintained.
>>>
>>>My proposal is that those interested in Eyelink TB programming reply to
>>>me, so that we continue the discussion in that group (and decide where
>>>to do this). I can tell a bit more also about our ideas back then about
>>>what ETB should be doing (and what not).
>>>
>>>Gr.
>>>Frans
>>>
>>>
>>>
>>>On 12/14/05, Daniel Sperka <djsperka at ucdavis.edu> wrote:
>>>
>>>
>>>      
>>>
>>>>Any chance yet to check in the code? I don't want to be a pest, so
>>>>please understand. We're just eager. Thanks in advance.
>>>>
>>>>Dan
>>>>
>>>>
>>>>
>>>>        
>>>>
>>>
>>>      
>>>
>>--
>>=======================================================================
>>
>>Daniel J. Sperka, Ph. D.
>>Software Developer/Analyst
>>Center for Neuroscience
>>University of California, Davis
>>
>>=======================================================================
>>
>>
>>
>>    
>>
>
>  
>

-- 
=======================================================================

Daniel J. Sperka, Ph. D.
Software Developer/Analyst
Center for Neuroscience
University of California, Davis

=======================================================================




From f.w.cornelissen at rug.nl  Fri Jan 13 16:49:19 2006
From: f.w.cornelissen at rug.nl (Frans W. Cornelissen)
Date: Fri, 13 Jan 2006 16:49:19 +0100
Subject: [Osxptb-dev] eyelink toolbox OSX
Message-ID: <28E23E18-844C-11DA-924E-000393D48314@rug.nl>

Could someone (Chris, Daniel) please create a zip or dmg with
the most current working version of eyelinktoolbox for OSX?.
(with perhaps a short note listing its limitations/capabilities)

I have a request for a version, but haven't gone through the motion of 
updating all my software to do development
myself.

Thanks,

Frans

--------------------------------------------------------
Frans W.Cornelissen
Laboratory of Experimental Ophthalmology
	& BCN Neuro-imaging Center
School of Behavioural and Cognitive Neurosciences
University Medical Center Groningen
University of Groningen
PO Box 30.001
9700 RB Groningen
Nederland

email: f.w.cornelissen at rug.nl
Tel. LEO: +31 50 3614173 / 2510
Tel. NIC: +31 50 363 8801 / 5111

http://franswcornelissen.webhop.org/



From mario.kleiner at tuebingen.mpg.de  Wed Jan 25 04:03:26 2006
From: mario.kleiner at tuebingen.mpg.de (Mario Kleiner)
Date: Wed, 25 Jan 2006 04:03:26 +0100
Subject: [Osxptb-dev] Stimulus timestamps, stimulus timing and such for PTB-OSX
In-Reply-To: <A20F1483-92B8-4EFA-9662-245512D85968@yorku.ca>
References: <web-17076544@tuebingen.mpg.de> <A20F1483-92B8-4EFA-9662-245512D85968@yorku.ca>
Message-ID: <43D6EA7E.1010507@tuebingen.mpg.de>

Hello Richard,

this is a long and detailled answer. I CC it to the developer 
mailing-list for documentation and to Christopher Taylor. I also CC 
David Jones because he seems to be especially interested in accurate 
stimulus timing, so this e-mail may give him enough technical details to 
understand this aspect of the implemetation.

Here we go...

Richard Murray wrote:
>> The second is your implementation of glm_swapbuffers() in
>> your "minimalistic Psychtoolbox": The way you collect
>> timestamps for buffer-swaps will not work reliably.
> 
> 
> Hi, Mario.  I've got a question about this.  I find that if I just  run 
> through a loop that does nothing but call aglSwapBuffers, it  takes 
> about one second to loop 60 times.  So apparently my program is  not 
> just sending a "swap-buffer" signal to the graphics card, and  
> continuing along its way.  Somewhere, it's pausing to wait for the  
> vertical retrace.  If it's not pausing at aglSwapBuffers, it's hard  to 
> imagine where else it might be pausing, which makes me think that  
> getting a timestamp immediately after aglSwapBuffers should be OK.
> 
> Can you explain again why this won't work?
> 
> Is it that the first aglSwapBuffers command just sends the swap- buffer 
> signal and then continues on, but the second aglSwapBuffers  command has 
> to wait until the first swap-buffer signal has been acted  on?

Short answer: Yes, that's the reason.

Long answer:  Let me explain in a *lot* of detail...

For any OpenGL application at the level of the gfx-driver and hardware 
roughly this happens:

OpenGL calls are translated by the gfx-driver into sequences of simpler 
low-level commands that the gfx-hardware directly understands. These 
commands are put into a queue (of limited capacity) and then your C-code 
continues execution: The graphics driver - and therefore execution of 
your C-code - only blocks/pauses if either a glFinish() command has been 
submitted ( in this case the driver waits for a hardware interrupt from 
the gfx-card until it continues), or if the command queue is full.

The gfx-hardware automatically dequeues and processes low-level commands 
when they are available in the queue, in parallel to and independent of 
the rest of the system.

Conceptually, a mapping may look like this:

OpenGL-Code:            Graphics hardware command stream tokens:
1. aglswapbuffers()     1.1. WAIT_FOR_ENGINE_IDLE
                         1.2. TRIGGER_PAGEFLIP (in sync with VBL)

2. OpenGL-drawing cmd.  2.1  3D_LOWLEVEL_CMD_x
                         2.2  3D_LOWLEVEL_CMD_y
                         ...
4. glFinish()           4.1  WAIT_FOR_ENGINE_IDLE
                         4.2  SEND_INTERRUPT_TO_HOST

WAIT_FOR_ENGINE_IDLE tells the gfx-hardware to complete all preceding 
drawing commands in the queue before continuation of stream-parsing.

TRIGGER_PAGEFLIP tells the hardware to prepare and trigger/enable a 
bufferswap on next retrace, but immediately continue stream-parsing 
after preparation, unless a bufferswap from an earlier TRIGGER_PAGEFLIP 
is still pending -- then it has to pause until that request is 
processed. If VBL-syncing is disabled, it won't wait for retrace but 
flip the buffers immediately, of course...

3D_LOWLEVEL_CMDs are just submitted to the lower-level hardware and 
processed by it -- there is a lot of parallelism in a modern graphics 
processor at many different levels, that's why modern 400$ gfx-cards 
often have the computing horsepower of more than 10 high-end G5's. This 
drawing commands only have to pause/wait if a bufferswap is pending, 
because until swap-completion, the backbuffer is not ready for drawing a 
new stimulus...

SEND_INTERRUPT_TO_HOST -- sends a hardware interrupt to the host 
computer so the gfx-driver gets signalled about some event and can react 
properly.

Now you can see some examples and how they may behave timing-wise in 
your C-Code:

t1=getsecs();
for i=1 to 1000
glm_swapbuffers;
end;
tswap = (getsecs - t1)/1000;

Possibly hundreds of WAIT_FOR_ENGINE_IDLE, TRIGGER_PAGEFLIP pairs can 
get submitted into the queue in a fraction of a second, until the queue 
is full and your C-Code will have to block. The gfx-hardware just eats 
the WAIT_FOR_ENGINE_IDLE in zero-time, because you didn't submit drawing 
commands so the drawing engine is idle all the time. Normally it would 
ensure that the stimulus is completely finished drawing before 
displaying it onscreen. The first TRIGGER_PAGEFLIP will take nearly zero 
time, because it just signals/prepares the bufferswap without waiting 
for it to complete, but the next TRIGGER_PAGEFLIP will pause the 
hardware until the previously triggered swap is completed, and so on... 
--> The queue gets emptied at a rate of say 60 command-pairs per second 
on a 60 Hz display, so the code above will report an execution time of 
getsecs - t1 = 999*16.6ms, because your C code blocks for dozens of 
seconds until the queue is ready again - or it stutters along when a bit 
of space becomes available in the queue --> Seems like one call took 
16.6 ms...

--> Average swap rate is 60 Hz, but only averaged over all frames!

How your code really behaves, depends on the size of your gfx-command 
queue, the exact version/type of operating system and the gfx-driver 
version. Earlier OS-X versions behaved differently than current ones, 
NVidia can behave different from ATI, M$-Windows or Linux differs... -- 
Some implementations limit the number of SwapBuffer commands that can be 
submitted without pausing to something like 2 - This is to prevent 
applications from running too far ahead in time with respect to the 
display refresh, because that could cause problems for interactive 
applications. On some M$-Windows machines one can even configure this 
maximum drawahead count... The current OS-X 10.4.4 on my NVidia hardware 
seems to limit this to two calls, your machine may do the same, but 
older OS versions behaved differently...

Case 2: Use of glFinish()

for i=1:1000
   glm_swapbuffers;
   glFinish();
   tonset=getsecs()
end;

Sequence is now 
1.WAIT_FOR_ENGINE_IDLE->2.TRIGGER_PAGEFLIP->3.WAIT_FOR_ENGINE_IDLE->SENDINTERRUPTTOHOST->...

1. is free as above, 2. is free as above, 3. is free as above, 4. will 
send the interrupt to immediately unblock your code which was waiting 
for the interrupt in glFinish(), so the first loop iteration will 
execute in nearly zero time. The following loop iterations are 
different: Following TRIGGER_PAGEFLIPs will block until swap-completion, 
so the SENDINTERRUPTTOHOST commands will delay until swap-completion, so 
your C-code will block in glFinish() until swap happens. All except the 
first loop iteration will show proper durations of 16.6 ms aka 60 Hz.

Problem is: In a typical psychophysics script, you don't draw & swap at 
*each single* monitor refresh interval (unless you do fast periodic 
animation) but possibly at a rate of only every n'th interval or even 
after a waiting time of hundreds of Milliseconds. Whenever the pause 
between two aglSwapBuffers() is bigger than one monitor refresh 
interval, the TRIGGER_PAGEFLIP won't have to block until VBL so 
glFinish() will not wait for glm_swapbuffers to complete. ---> Very 
puzzling 'tonset' stimulus presentation timestamps, not related to the 
expected values or to the real stimulus timing...


--> aglSwapBuffers aka TRIGGER_PAGEFLIP is not a reliable general way to 
synchronize your *code* or Matlab to the VBL, not even with glFinish(), 
although it guarantees a perfectly synced stimulus onset, just not any 
meaningful robust timestamps related to that...

The solution that PTB uses and that should always work in the expected 
way on any OpenGL system, aka block code execution until the bufferswap 
really happened:

for i=1:1000
   glm_swapbuffers;
   glBegin(GL_POINTS)
   glVertex2i(10,10);
   glEnd;
   glFinish;
   tonset=getsecs()
end;

This translates into something like:

1. aglswapbuffers()     1.1. WAIT_FOR_ENGINE_IDLE
                         1.2. TRIGGER_PAGEFLIP (in sync with VBL)

2. glBegin(GL_POINTS)   2.0  3D_PRIMITIVE_SELECT_POINTS
    glVertexi(10,10)     2.1  3D_VERTEX_SUBMIT_C2_INT32_(10,10)
    glEnd()              2.2  3D_PRIMITIVE_END
                         ...
4. glFinish()           4.1  WAIT_FOR_ENGINE_IDLE
                         4.2  SEND_INTERRUPT_TO_HOST

5. Driver waits for Interrupt from gfx-hardware, aka pauses in 
glFinish() until IRQ arrived, then returns control to your code.

6. Take timestamp.


So 1.1, 1.2 excecute in nearly zero time as in examples above, but 2.1 
is a drawing command, so it *has* to wait until the bufferswap has 
really happened before the backbuffer is ready for use and it continue 
execution. 4.1 will be nearly zero time as drawing a single pixel via 
glVertex() takes only a fraction of a microsecond. 4.2 will send the 
interrupt which wakes up your code -> glFinish() returns -> timestamp is 
taken. --> You'll always get a timestamp related to the real bufferswap.

The only remaining source of timestamp jitter is the delay between 
receiving the hardware interrupt by the graphics driver and the 
continuation of your code by the operating system in response to the 
interrupt. This scheduling jitter depends on many events in the system - 
usually it is in the sub-millisecond range if Priority() and Rush() are 
used properly on a well prepared system, but it can jump up to multiple 
milliseconds occasionally. On OS-X the Psychtoolbox uses a trick to 
account for the jitter and correct the timestamp to the true time of VBL 
onset:

When taking the timestamp, we query the rasterbeam-position of the 
display via CGDisplayBeamposition(cgdisplayid). As we therefore know the 
number of scanlines the beam travelled since VBL onset and the total 
height of the display in scanlines and the duration of one monitor 
refresh interval, we can compute the time elapsed since VBL onset aka 
bufferswap. We subtract this time from our getsecs() timestamp to get 
the true onset time. --> This gives you submillisecond precision... -- 
On my machine e.g., average jitter reduces from 150 microseconds to 10 
microseconds and any multi-millisecond spikes disappear.

We have a lot of code in Screen('OpenWindow') to calibrate this whole 
mechanism and perform all kinds of paranoid timing-checks to make sure 
this beast works properly.

Bufferswaps in sync with VBL are performed in sub-microsecond time on 
any gfx-hardware, because a bufferswap just swaps the values of two 
memory address registers in the gfx-hardware, basically two memory 
pointers into VRAM memory: One points to the start of the memory buffer 
which holds the current image for display scanout (frontbuffer), the 
other one points to the start of the memory buffer to which the drawing 
engine directs its pixel writes (backbuffer)... --> Only about 8 Bytes 
need to be copied, not multi-megabyte image buffers or multi-kilobyte 
CLUTS for CLUT animation. And this exchange is handled by logic 
circuitry in the hardware, independent of the operating system and its 
drivers - and the associated delays...

That's why TRIGGER_PAGEFLIP is fast: Exchange content of two hardware 
registers to prepare the swap and then set a single trigger-bit in the 
hardware to enable the swapping circuitry in the hardware...


Another interesting issue for high-performance rendering is the role of 
glFlush() and glFinish():

Each glFinish() and each aglSwapBuffers() call first executes an 
implicit glFlush() before doing the stuff mentioned above...

glFlush() flushes the command stream to the hardware. Technically the 
OpenGL command queue is implemented as a linked list of a fixed number 
of fixed size command buffers (DMA buffers). The gfx-driver, when 
executing your OpenGL commands, queues up a batch of commands until such 
a buffer is completely full. Then it signals the gfx-hardware to 
automatically fetch this buffer from system RAM memory into local VRAM 
memory via DMA transfers and to start processing that buffer in parallel 
as explained above. The hardware will signal completion of a command 
buffer to the driver via another hardware interrupt, so the OS can do 
other stuff in the meantime...

So, normally OpenGL commands are submitted in batches to the hardware, 
one DMA buffer a time. This is done for efficiency reasons, but it can 
have one unfriendly impact on stimulus presentation timing. If you only 
submit a few OpenGL commands per drawn frame, because your stim is 
relatively simple, then it may happen that the buffer is not filled up 
completely by your few commands. In this case the gfx-hardware will not 
immmediately execute your drawing commands but stay idle until either 
aglSwapBuffers() enforces transmission of a partially filled buffer or a 
system timer runs out that will enforce a pipeline flush every so and so 
many hundred milliseconds if the buffers don't fill up.

-> Effectively it can happen that the gfx hardware doesn't process your 
drawing commands until just before the stimulus onset deadline, then 
starts drawing way too late and miss the next retrace (=your deadline) 
because it can't finish before the deadline although there would have 
been plenty of time for drawing the stimulus if it had started in time!

You can intersperse glFlush() calls into your code to enforce early 
start of processing in such cases, making optimal use of the parallelism 
between main processor and graphics processor.

Problem is: Each glFlush will submit one command buffer and the system 
only has a limited number of them. Using too many glFlush()'es can cause 
the system to run out of free buffers, so your code will block until 
buffers become available again -- now the CPU is idle and you lose 
performance! That's why Apple doesn't recommend use of glFlush() - it 
can degrade performance if used in the wrong way.

So here is what we did for Psychtoolbox:

Whenever Screen('Flip', windowPtr [, when]) is called with a stimulus 
onset deadline 'when' greater than zero, this means: Flip at the first 
vertical retrace after system time 'when', instead of next retrace...

If 'when' is sufficiently far in the future (aka not the next retrace), 
we first call glFlush() to trigger immediate start of rendering of all 
enqueued drawing commands, then we go to sleep until short before the 
deadline, releasing the CPU for other processes in the system. GPU 
executes our drawing commands, CPU executes system tasks like 
sound-output, keyboard and mouse checks, queries to DAQ or other I/O 
devices, whatever is needed to keep the system running well...

Shortly before the deadline we wake up and do the swapbuffers(), 
glVertex, glFinish() call so the gfx-hardware can lock onto onset of 
next retrace and do a perfectly timed bufferswap.

--> This gives good parallelism/performance by default.

If a user wants to draw a very demanding stimulus, he can lay out his 
code for optimal performance:

1. First the drawing commands that translate into OpenGL commands.
2. Then a call to Screen('DrawingFinished') which is nothing else than 
an explicit call to glFlush() to trigger immediate drawing of the stimulus.
3. Then all other Matlab code, e.g., keyboard checks and such -- this is 
now executed in parallel to stimulus drawing on the gfx-card.
4. Then the Flip - call...

--> This can make a difference when demanding stimuli are drawn, 
although i would guess that modern gfx-hardware will handle most stimuli 
easily without such tricks.

Everything i explained is only an approximation of what really happens. 
The examples are based on what i learned during studies of 
computer-graphics and graphics-hardware and by having a close look at 
the Opensource ATI graphics driver for Linux + technical doc you can 
find on OS-X's and Linux internals. The exact implementation differs for 
each model of gfx-card / OS out there and is confidential information, 
so the details are in the dark unless you have very special connections 
to ATI, Apple or NVidia ...

Don't know if this info will be useful for you, but in case you need it...

I wrote this down in so much detail for the other developers, because 
the source-code documentation doesn't explain this stuff in enough 
detail. At some point we may use this e-mail as a draft for proper 
technical documentation of PTB's inner working.

Best,
-mario



From mario.kleiner at tuebingen.mpg.de  Tue Jan 31 03:41:38 2006
From: mario.kleiner at tuebingen.mpg.de (Mario Kleiner)
Date: Tue, 31 Jan 2006 03:41:38 +0100
Subject: [Osxptb-dev] NEW: Improved OS-9 compatibility, Offscreen windows et al.,
 M$-Windows port of OpenGL Psychtoolbox
Message-ID: <web-17239718@tuebingen.mpg.de>

Hello all,

the beta-branch of OS-X Psychtoolbox has
received a massive update with lots of new
experimental features:

- Support for Offscreen windows is back:

  Screen('OpenOffscreenWindow'),
  and Screen('CopyWindow')
  are back and should mostly behave like
  they did in the past.

  Drawing to Offscreen windows is possible
  again.

  Offscreen windows are implemented as
  OpenGL textures, just like the textures that
  you can create via Screen('MakeTexture'),
  therefore you can mostly use Textures and
  Offscreen windows interchangeably, e.g,
  draw an Offscreen window via the 'DrawTexture'
  function...

* Some kind of compatibility mode to the old
  drawing model of the MacOS-9 PTB has been
  added. If you add the following line:

  Screen('Preference','EmulateOldPTB',1)

  to the top of your script (before any other Screen-
  call), then PTB tries to behave like the old PTB.

  The Screen('WaitBlanking') command then works
  again and all drawing commands take effect
  immediately...

Please use this new features only if you either
need to draw to Offscreen windows, or if you are
absolutely unable to port OS-9 code to OS-X. Do
not use it for writing new code!!!

-> Speed and efficiency of drawing in OS-9 mode
will be significantly lower than in OS-X mode.

-> Memory consumption may be much higher.

-> Stimulus presentation timing of the new
Screen('Flip') command is much more robust
and accurate than with the old WaitBlanking method.
Stimulus onset with 'Flip' is guaranteed to be well-
defined (down to the microsecond level) and
tear-free, whereas no such guarantees can be
made at all for the old WaitBlanking method.

-> A huge number of new features as demonstrated
by some of the PsychDemos is only possible when
not using compatibility mode.

-> This code hasn't received much testing, so it
may contain serious bugs. Support for
compatibility mode is a *very low* priority for me.
If you find problems, feel free to report them but
i won't make a commitment to fix any of the
reported problems in a short period of time (or
to fix them at all). If this proves to be too
troublesome, it will be removed again.

-> So if you are a user of the old OS-9 PTB,
you may give it a try. If it works, it works, if it
doesn't it doesn't. Feel free to report the problems
and try to provide fixes for simple problems yourself.

What definitely doesn't work is any kind of CLUT
animation for now.

If you find that this release breaks any of your
existing OS-X code, please report it immediately.
Keeping OS-X PTB well working is a much higher
priority.

Finally, beta contains the initial release of the
OpenGL Psychtoolbox for Microsoft Windows.

This is a hybrid of the old and new PTB:

All M-Files are identical to the OS-X PTB.
The Screen - Mex file is ported from the OS-X
PTB. All other Mex-files are identical to the ones
in the old Windows Psychtoolbox 2.54...

Screen is mostly feature compatible to the
Screen command in OS-X with the following
exceptions:

* Quicktime movie playback support is not
available until Apple manages to provide
a decent Quicktime-7 SDK for Windows
instead of the brain-damage that they
currently ship.

* Multi display support is limited. PTB can't
detect secondary displays of a multi-display
setup yet, but if "Desktop spanning" is enabled,
it can make use of a 2nd display for stereo-
display purpose. Just run "StereoDemo(4)" to
see how stereo-configurations are supported.
Read message 4147 for info on how to do this
on NVidia gfx-cards.

* CLUT animation is not yet possible, so
CLUTDemoOSX won't work, but linearizing
or gamma-correcting displays is possible. See
"Screen LoadNormalizedGammaTable?" for
explanation.

* Matlab version 5,6 and 7 should work.

Transition from old WinPTB to the new one will
be gradually. So if you are happy with your
current Win 2.54 setup, stick to it. If you want
to use one of the new features, give the beta
a try... This is a beta release, so it will certainly
contain some bugs that will take time to fix...

What else is new in this beta - release?

The flicker-test sheet has been removed which
used to show up on dual-display setups. It
used to confuse and annoy users. You can
find a new PerceptualVBLSyncTest.m test in
the PsychTest folder which is a good replacement.


Download works as follows:

If you already have the "UpdatePsychtoolbox" script,
then just follow its instructions.

If you are a new would-be user of 'beta', please
download:

<http://www.kyb.tuebingen.mpg.de/bu/people/kleinerm/ptbosx/DownloadPsychtoolbox.m>

Put it into your Matlab path, type
"help DownloadPsychtoolbox" and follow the
instructions. Make sure to finally invoke
the script with the flavor argument set to
'beta' ...


Again, 'beta' contains experimental code for
integration into future official releases, so
test carefully, use with caution, don't bet
on it working out of the box flawlessly...

Good luck,
-mario



